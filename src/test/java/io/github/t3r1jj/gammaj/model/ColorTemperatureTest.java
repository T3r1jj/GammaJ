/*
 * Copyright 2016 Damian Terlecki.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.t3r1jj.gammaj.model;

import java.util.Arrays;
import java.util.Collection;
import static org.hamcrest.CoreMatchers.is;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Assume;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class ColorTemperatureTest {

    private enum Channel {

        RED, GREEN, BLUE
    };
    private static final double delta = 0.05;

    private final Channel channel;
    private final double temperature;
    private final double expected;

    // Comparing to http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html
    // Functional range: 1667K to 25000K
    @Parameters
    public static Collection<Object[]> data() {
        double[][] expectedRgb = new double[][]{{1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9937, 0.9726, 0.9526, 0.9337, 0.9157, 0.8986, 0.8823, 0.8668, 0.8520, 0.8379, 0.8244, 0.8115, 0.7992, 0.7874, 0.7761, 0.7652, 0.7548, 0.7449, 0.7353, 0.7260, 0.7172, 0.7086, 0.7004, 0.6925, 0.6848, 0.6774, 0.6703, 0.6635, 0.6568, 0.6504, 0.6442, 0.6382, 0.6324, 0.6268, 0.6213, 0.6161, 0.6109, 0.6060, 0.6012, 0.5965, 0.5919, 0.5875, 0.5833, 0.5791, 0.5750, 0.5711, 0.5673, 0.5636, 0.5599, 0.5564, 0.5530, 0.5496, 0.5463, 0.5431, 0.5400, 0.5370, 0.5340, 0.5312, 0.5283, 0.5256, 0.5229, 0.5203, 0.5177, 0.5152, 0.5128, 0.5104, 0.5080, 0.5057, 0.5035, 0.5013, 0.4991, 0.4970, 0.4950, 0.4930, 0.4910, 0.4891, 0.4872, 0.4853, 0.4835, 0.4817, 0.4799, 0.4782, 0.4765, 0.4749, 0.4733, 0.4717, 0.4701, 0.4686, 0.4671, 0.4656, 0.4641, 0.4627, 0.4613, 0.4599, 0.4586, 0.4572, 0.4559, 0.4546, 0.4534, 0.4521, 0.4509, 0.4497, 0.4485, 0.4474, 0.4462, 0.4451, 0.4440, 0.4429, 0.4418, 0.4408, 0.4397, 0.4387, 0.4377, 0.4367, 0.4357, 0.4348, 0.4338, 0.4329, 0.4319, 0.4310, 0.4301, 0.4293, 0.4284, 0.4275, 0.4267, 0.4258, 0.4250, 0.4242, 0.4234, 0.4226, 0.4218, 0.4211, 0.4203, 0.4196, 0.4188, 0.4181, 0.4174, 0.4167, 0.4160, 0.4153, 0.4146, 0.4139, 0.4133, 0.4126, 0.4119, 0.4113, 0.4107, 0.4100, 0.4094, 0.4088, 0.4082, 0.4076, 0.4070, 0.4064, 0.4059, 0.4053, 0.4047, 0.4042, 0.4036, 0.4031, 0.4026, 0.4020, 0.4015, 0.4010, 0.4005, 0.4000, 0.3995, 0.3990, 0.3985, 0.3980, 0.3975, 0.3970, 0.3966, 0.3961, 0.3956, 0.3952, 0.3947, 0.3943, 0.3938, 0.3934, 0.3930, 0.3925, 0.3921, 0.3917, 0.3913, 0.3909, 0.3905, 0.3901, 0.3897, 0.3893, 0.3889, 0.3885, 0.3881, 0.3877, 0.3874, 0.3870, 0.3866, 0.3863, 0.3859, 0.3855, 0.3852, 0.3848, 0.3845, 0.3841, 0.3838, 0.3835, 0.3831, 0.3828, 0.3825, 0.3821, 0.3818, 0.3815, 0.3812, 0.3809, 0.3805, 0.3802, 0.3799, 0.3796, 0.3793, 0.3790, 0.3787, 0.3784, 0.3781, 0.3779, 0.3776, 0.3773, 0.3770, 0.3767, 0.3764, 0.3762, 0.3759, 0.3756, 0.3754, 0.3751, 0.3748, 0.3746, 0.3743, 0.3741, 0.3738, 0.3735, 0.3733, 0.3730, 0.3728, 0.3726, 0.3723, 0.3721, 0.3718, 0.3716, 0.3714, 0.3711, 0.3709, 0.3707, 0.3704, 0.3702, 0.3700, 0.3698, 0.3695, 0.3693, 0.3691, 0.3689, 0.3687, 0.3684, 0.3682, 0.3680, 0.3678, 0.3676, 0.3674, 0.3672, 0.3670, 0.3668, 0.3666, 0.3664, 0.3662, 0.3660, 0.3658, 0.3656, 0.3654, 0.3652, 0.3650, 0.3649, 0.3647, 0.3645, 0.3643, 0.3641, 0.3639, 0.3638, 0.3636, 0.3634, 0.3632, 0.3630, 0.3629, 0.3627, 0.3625, 0.3624, 0.3622, 0.3620, 0.3619, 0.3617, 0.3615, 0.3614, 0.3612, 0.3610, 0.3609, 0.3607, 0.3605, 0.3604, 0.3602, 0.3601, 0.3599, 0.3598, 0.3596, 0.3595, 0.3593, 0.3592, 0.3590, 0.3589, 0.3587, 0.3586, 0.3584, 0.3583, 0.3581, 0.3580, 0.3579, 0.3577, 0.3576, 0.3574, 0.3573, 0.3572, 0.3570, 0.3569, 0.3567, 0.3566, 0.3565, 0.3563}, {0.0337, 0.0592, 0.0846, 0.1096, 0.1341, 0.1578, 0.1806, 0.2025, 0.2235, 0.2434, 0.2647, 0.2889, 0.3126, 0.3360, 0.3589, 0.3814, 0.4034, 0.4250, 0.4461, 0.4668, 0.4870, 0.5067, 0.5259, 0.5447, 0.5630, 0.5809, 0.5983, 0.6153, 0.6318, 0.6480, 0.6636, 0.6789, 0.6938, 0.7083, 0.7223, 0.7360, 0.7494, 0.7623, 0.7750, 0.7872, 0.7992, 0.8108, 0.8221, 0.8330, 0.8437, 0.8541, 0.8642, 0.8740, 0.8836, 0.8929, 0.9019, 0.9107, 0.9193, 0.9276, 0.9357, 0.9436, 0.9513, 0.9526, 0.9395, 0.9270, 0.9150, 0.9035, 0.8925, 0.8819, 0.8718, 0.8621, 0.8527, 0.8437, 0.8351, 0.8268, 0.8187, 0.8110, 0.8035, 0.7963, 0.7894, 0.7827, 0.7762, 0.7699, 0.7638, 0.7579, 0.7522, 0.7467, 0.7414, 0.7362, 0.7311, 0.7263, 0.7215, 0.7169, 0.7124, 0.7081, 0.7039, 0.6998, 0.6958, 0.6919, 0.6881, 0.6844, 0.6808, 0.6773, 0.6739, 0.6706, 0.6674, 0.6642, 0.6611, 0.6581, 0.6552, 0.6523, 0.6495, 0.6468, 0.6441, 0.6415, 0.6389, 0.6364, 0.6340, 0.6316, 0.6293, 0.6270, 0.6247, 0.6225, 0.6204, 0.6183, 0.6162, 0.6142, 0.6122, 0.6103, 0.6084, 0.6065, 0.6047, 0.6029, 0.6012, 0.5994, 0.5978, 0.5961, 0.5945, 0.5929, 0.5913, 0.5898, 0.5882, 0.5868, 0.5853, 0.5839, 0.5824, 0.5811, 0.5797, 0.5784, 0.5770, 0.5757, 0.5745, 0.5732, 0.5720, 0.5708, 0.5696, 0.5684, 0.5673, 0.5661, 0.5650, 0.5639, 0.5628, 0.5617, 0.5607, 0.5597, 0.5586, 0.5576, 0.5566, 0.5557, 0.5547, 0.5538, 0.5528, 0.5519, 0.5510, 0.5501, 0.5492, 0.5483, 0.5475, 0.5466, 0.5458, 0.5450, 0.5442, 0.5434, 0.5426, 0.5418, 0.5410, 0.5403, 0.5395, 0.5388, 0.5381, 0.5373, 0.5366, 0.5359, 0.5352, 0.5345, 0.5339, 0.5332, 0.5325, 0.5319, 0.5312, 0.5306, 0.5300, 0.5293, 0.5287, 0.5281, 0.5275, 0.5269, 0.5264, 0.5258, 0.5252, 0.5246, 0.5241, 0.5235, 0.5230, 0.5224, 0.5219, 0.5214, 0.5209, 0.5203, 0.5198, 0.5193, 0.5188, 0.5183, 0.5178, 0.5174, 0.5169, 0.5164, 0.5159, 0.5155, 0.5150, 0.5146, 0.5141, 0.5137, 0.5132, 0.5128, 0.5123, 0.5119, 0.5115, 0.5111, 0.5107, 0.5103, 0.5098, 0.5094, 0.5090, 0.5086, 0.5083, 0.5079, 0.5075, 0.5071, 0.5067, 0.5064, 0.5060, 0.5056, 0.5053, 0.5049, 0.5045, 0.5042, 0.5038, 0.5035, 0.5032, 0.5028, 0.5025, 0.5021, 0.5018, 0.5015, 0.5012, 0.5008, 0.5005, 0.5002, 0.4999, 0.4996, 0.4993, 0.4990, 0.4987, 0.4984, 0.4981, 0.4978, 0.4975, 0.4972, 0.4969, 0.4966, 0.4963, 0.4960, 0.4958, 0.4955, 0.4952, 0.4949, 0.4947, 0.4944, 0.4941, 0.4939, 0.4936, 0.4934, 0.4931, 0.4928, 0.4926, 0.4923, 0.4921, 0.4918, 0.4916, 0.4914, 0.4911, 0.4909, 0.4906, 0.4904, 0.4902, 0.4899, 0.4897, 0.4895, 0.4893, 0.4890, 0.4888, 0.4886, 0.4884, 0.4881, 0.4879, 0.4877, 0.4875, 0.4873, 0.4871, 0.4869, 0.4867, 0.4864, 0.4862, 0.4860, 0.4858, 0.4856, 0.4854, 0.4852, 0.4850, 0.4848, 0.4847, 0.4845, 0.4843, 0.4841, 0.4839, 0.4837, 0.4835, 0.4833, 0.4831, 0.4830, 0.4828, 0.4826, 0.4824, 0.4822, 0.4821, 0.4819, 0.4817, 0.4815, 0.4814, 0.4812, 0.4810, 0.4809, 0.4807, 0.4805, 0.4804, 0.4802, 0.4800, 0.4799, 0.4797, 0.4796, 0.4794, 0.4792, 0.4791, 0.4789, 0.4788, 0.4786, 0.4785, 0.4783, 0.4782, 0.4780, 0.4779, 0.4777, 0.4776, 0.4774, 0.4773, 0.4771, 0.4770, 0.4768, 0.4767, 0.4766, 0.4764, 0.4763, 0.4761, 0.4760, 0.4759, 0.4757, 0.4756, 0.4755, 0.4753, 0.4752, 0.4751, 0.4749, 0.4748, 0.4747, 0.4745}, {0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0033, 0.0120, 0.0219, 0.0331, 0.0454, 0.0588, 0.0734, 0.0889, 0.1054, 0.1229, 0.1411, 0.1602, 0.1800, 0.2005, 0.2216, 0.2433, 0.2655, 0.2881, 0.3112, 0.3346, 0.3583, 0.3823, 0.4066, 0.4310, 0.4556, 0.4803, 0.5051, 0.5299, 0.5548, 0.5797, 0.6045, 0.6293, 0.6541, 0.6787, 0.7032, 0.7277, 0.7519, 0.7760, 0.8000, 0.8238, 0.8473, 0.8707, 0.8939, 0.9168, 0.9396, 0.9621, 0.9844, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000}};
//        int casesCount = expectedRgb.length * expectedRgb[0].length;
        int casesCount = expectedRgb.length * (250-9);
        Object[][] testCases = new Object[casesCount][3];
        Channel[] channels = new Channel[]{Channel.RED, Channel.GREEN, Channel.BLUE};
        int l = 0;
        for (int i = 0; i < 3; i++) {
            double temperature = 1000;
            for (int k = 0; k < expectedRgb[i].length; k++, temperature += 100) {
                if (temperature < 1000 || temperature > 25000) {
                    continue;
                }
                testCases[l++] = new Object[]{channels[i], temperature, expectedRgb[i][k]};
            }
        }
        return Arrays.asList(testCases);
    }

    public ColorTemperatureTest(Channel channel, double temperature, double expected) {
        this.channel = channel;
        this.temperature = temperature;
        this.expected = expected;
    }

    @Test
    public void testGetRgb_Red() {
        Assume.assumeThat(Channel.RED, is(channel));
        ColorTemperature instance = new ColorTemperature(temperature);
        double result = instance.getRgb()[0];
        System.out.println(Arrays.toString(instance.getRgb()));
        assertEquals("Temp " + temperature + ":", expected, result, delta);
    }

    @Test
    public void testGetRgb_Green() {
        Assume.assumeThat(Channel.GREEN, is(channel));
        ColorTemperature instance = new ColorTemperature(temperature);
        double result = instance.getRgb()[1];
        System.out.println(Arrays.toString(instance.getRgb()));
        assertEquals("Temp " + temperature + ":", expected, result, delta);
    }

    @Test
    public void testGetRgb_Blue() {
        Assume.assumeThat(Channel.BLUE, is(channel));
        ColorTemperature instance = new ColorTemperature(temperature);
        double result = instance.getRgb()[2];
        System.out.println(Arrays.toString(instance.getRgb()));
        assertEquals("Temp " + temperature + ":", expected, result, delta);
    }

}
